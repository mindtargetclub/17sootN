{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/src/components/bdadd4_Display.vue?vue&type=template&id=b9a6a130&","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/src/components/bdadd4_Display.vue","mtime":1654926261803},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soo_mdf2tN/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9IiBmbGV4IGp1c3RpZnktY2VudGVyICAiPgogIAogIAogIDxkaXYgY2xhc3M9InctZnVsbCAiPiAgIAogICAgICA8di10YWJzCiAgICAgICAgICB2LW1vZGVsPSJ0YWIiCiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yPSJkZWVwLXB1cnBsZSIgCiAgICAgICAgICBncm93CiAgICAgICAgICBhY3RpdmUtY2xhc3M9ImJnLWdyYXktOTAwIHRleHQtd2hpdGUiCiAgICAgICAgICBjbGFzcz0idGV4dC1ncmF5LTUwMCIKICAgICAgICA+IAogICAgICAgICAgPHYtdGFiIGtleT0nazEnIGhyZWY9JyNrMScgdi1pZj0iIWhpZGUiIGNsYXNzPSJiZy1ncmF5LTIwMCAgIiAgPiAgICAKICAgICAgICAgICAgUuaokwogICAgICAgICAgPC92LXRhYj4KCiAgICAgICAgICA8di10YWIga2V5PSdrMicgaHJlZj0nI2syJyBjbGFzcz0iYmctZ3JheS0yMDAgICIgPiAKICAgICAgICAgICAgMeaokwogICAgICAgICAgPC92LXRhYj4gCgogICAgICAgIDwvdi10YWJzPiAgCgogICAgPHYtdGFicy1pdGVtcyB2LW1vZGVsPSJ0YWIiPiAKCiAgICAgIDx2LXRhYi1pdGVtIGtleT0nazEnIHZhbHVlPSdrMSc+IAogICAgICAgIDx2LWxpc3QtaXRlbS1ncm91cCAKICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IiA+CiAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgdi1mb3I9Iih0dXRvcmlhbCwgaW5kZXgpIGluIHR1dG9yaWFscyIgIAogICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwucG9zID09J1LmqJMnIgogICAgICAgICAgPiAKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzIHB5LTIgcGwtMyBteS0xIGJvcmRlci0yIHJvdW5kZWQtc20gYmctcmVkLTEwMCBib3JkZXItcmVkLTMwMCAiCiAgICAgICAgICAgICAgICAgICAgIHYtaWY9InR1dG9yaWFsLnNubyA9PSAxIHwgdHV0b3JpYWwuc25vID09IDIgIiAgCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzICBweS0yIHBsLTMgbXktMSBib3JkZXItMiByb3VuZGVkLXNtIGJnLXllbGxvdy0xMDAgYm9yZGVyLXllbGxvdy0zMDAgIgogICAgICAgICAgICAgICAgICAgIHYtaWY9InR1dG9yaWFsLnNubyA9PSAzIHwgdHV0b3JpYWwuc25vID09IDQgIiAKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBmbGV4ICB3LWZ1bGwiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgdy0xLzUgcGwtMiI+IHt7IHR1dG9yaWFsLnBvcyB9fV97eyB0dXRvcmlhbC5zbm9faWR4IH19ICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iICB3LWF1dG8gICB0ZXh0LXhzIGZvbnQtYmxhY2siPiAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iIHAtMSBiZy1yZWQtNTAwIHJvdW5kZWQtZnVsbCB0ZXh0LXdoaXRlIHRleHQteHMgZm9udC1ibGFjayI+IHt7IHR1dG9yaWFsLnRtcF9pZHggfX0gPC9zcGFuPiAgCiAgICAgICAgICAgICAgICAgICAgICAsIDx2LWNoaXAgCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0iQ2hrVGltZTJnZXRDb2xvcih0dXRvcmlhbC5sZWZ0X3RpbWUpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXJrIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IHR1dG9yaWFsLmxlZnRfdGltZSB9femboiAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1jaGlwPiAKICAgICAgICAgICAgICAgICAgPC9kaXY+ICAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctYXV0byAgdGV4dC14cyB0ZXh0LWJsdWUtNTAwICI+ICB7eyB0dXRvcmlhbC5wbHlfc3RhdHUgfX0se3sgdHV0b3JpYWwubWVtbyB9fSAgIDwvZGl2PiAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+CgogICAgICAgICAgICA8di1saXN0LWl0ZW0tY29udGVudCAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iIHRleHQteHMgYmctZ3JlZW4tMTAwIHB5LTIgcGwtMyBteS0xIGJvcmRlci0yIHJvdW5kZWQtc20gYm9yZGVyLWdyZWVuLTMwMCAiCiAgICAgICAgICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwuc25vID09IDUgfCB0dXRvcmlhbC5zbm8gPT0gNiAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzIHB5LTIgcGwtMyBteS0xIGJvcmRlci0yIHJvdW5kZWQtc20gIGJnLWdyYXktMTAwIGJvcmRlci1ncmF5LTMwMCAiCiAgICAgICAgICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwuc25vID09IDcgfCB0dXRvcmlhbC5zbm8gPT0gOCAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICA8di1saXN0LWl0ZW0tY29udGVudCAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iIHRleHQteHMgIHB5LTIgcGwtMyBteS0xIGJvcmRlci0yIHJvdW5kZWQtc20gYmctaW5kaWdvLTEwMCBib3JkZXItaW5kaWdvLTMwMCAiCiAgICAgICAgICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwuc25vID09IDkgfCB0dXRvcmlhbC5zbm8gPT0gMTAgIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIGZsZXggIHctZnVsbCI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LTEvNSBwbC0yIj4ge3sgdHV0b3JpYWwucG9zIH19X3t7IHR1dG9yaWFsLnNub19pZHggfX0gIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgIHctYXV0byAgIHRleHQteHMgZm9udC1ibGFjayI+IAogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSIgcC0xIGJnLXJlZC01MDAgcm91bmRlZC1mdWxsIHRleHQtd2hpdGUgdGV4dC14cyBmb250LWJsYWNrIj4ge3sgdHV0b3JpYWwudG1wX2lkeCB9fSA8L3NwYW4+ICAKICAgICAgICAgICAgICAgICAgICAgICwgPHYtY2hpcCAKICAgICAgICAgICAgICAgICAgICAgICAgOmNvbG9yPSJDaGtUaW1lMmdldENvbG9yKHR1dG9yaWFsLmxlZnRfdGltZSkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsgc21hbGwKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgdHV0b3JpYWwubGVmdF90aW1lIH196ZuiIAogICAgICAgICAgICAgICAgICAgICAgPC92LWNoaXA+IAogICAgICAgICAgICAgICAgICA8L2Rpdj4gIAogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgdy1hdXRvICB0ZXh0LXhzIHRleHQtYmx1ZS01MDAgIj4gIHt7IHR1dG9yaWFsLnBseV9zdGF0dSB9fSx7eyB0dXRvcmlhbC5tZW1vIH19ICAgPC9kaXY+IAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tY29udGVudD4KCiAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50IAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIgdGV4dC14cyAgcHktMiBwbC0zIG15LTEgYm9yZGVyLTIgcm91bmRlZC1zbSBiZy1waW5rLTEwMCBib3JkZXItcGluay0zMDAgIgogICAgICAgICAgICAgICAgICAgIHYtaWY9InR1dG9yaWFsLnNubyA9PSAxMSAgfCB0dXRvcmlhbC5zbm8gPT0gMTIiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzICBweS0yIHBsLTMgbXktMSBib3JkZXItMiByb3VuZGVkLXNtIGJnLWJsdWUtMTAwIGJvcmRlci1ibHVlLTMwMCAiCiAgICAgICAgICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwuc25vID09IDEzIHwgdHV0b3JpYWwuc25vID09IDE0ICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBmbGV4ICB3LWZ1bGwiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgdy0xLzUgcGwtMiI+IHt7IHR1dG9yaWFsLnBvcyB9fV97eyB0dXRvcmlhbC5zbm9faWR4IH19ICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iICB3LWF1dG8gICB0ZXh0LXhzIGZvbnQtYmxhY2siPiAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iIHAtMSBiZy1yZWQtNTAwIHJvdW5kZWQtZnVsbCB0ZXh0LXdoaXRlIHRleHQteHMgZm9udC1ibGFjayI+IHt7IHR1dG9yaWFsLnRtcF9pZHggfX0gPC9zcGFuPiAgCiAgICAgICAgICAgICAgICAgICAgICAsIDx2LWNoaXAgCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0iQ2hrVGltZTJnZXRDb2xvcih0dXRvcmlhbC5sZWZ0X3RpbWUpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXJrIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IHR1dG9yaWFsLmxlZnRfdGltZSB9femboiAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1jaGlwPiAKICAgICAgICAgICAgICAgICAgPC9kaXY+ICAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctYXV0byAgdGV4dC14cyB0ZXh0LWJsdWUtNTAwICI+ICB7eyB0dXRvcmlhbC5wbHlfc3RhdHUgfX0se3sgdHV0b3JpYWwubWVtbyB9fSAgIDwvZGl2PiAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+ICAgCgogICAgICAgICAgICA8di1saXN0LWl0ZW0tY29udGVudCAKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iIHRleHQteHMgIHB5LTIgcGwtMyBteS0xIGJvcmRlci0yIHJvdW5kZWQtc20gYmctZ3JlZW4tMTAwIGJvcmRlci1ncmVlbi0zMDAgIgogICAgICAgICAgICAgICAgICAgIHYtaWY9InR1dG9yaWFsLnNubyA9PSAxNSB8IHR1dG9yaWFsLnNubyA9PSAxNiAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzICBweS0yIHBsLTMgbXktMSBib3JkZXItMiByb3VuZGVkLXNtIGJnLXJlZC0xMDAgYm9yZGVyLXJlZC0zMDAgIgogICAgICAgICAgICAgICAgICAgIHYtaWY9InR1dG9yaWFsLnNubyA9PSAxNyB8IHR1dG9yaWFsLnNubyA9PSAxOCAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzICBweS0yIHBsLTMgbXktMSBib3JkZXItMiByb3VuZGVkLXNtIGJnLWJsdWUtMTAwIGJvcmRlci1ibHVlLTMwMCAiCiAgICAgICAgICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwuc25vID09IDIwIHwgdHV0b3JpYWwuc25vID09IDE5ICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBmbGV4ICB3LWZ1bGwiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgdy0xLzUgcGwtMiI+IHt7IHR1dG9yaWFsLnBvcyB9fV97eyB0dXRvcmlhbC5zbm9faWR4IH19ICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iICB3LWF1dG8gICB0ZXh0LXhzIGZvbnQtYmxhY2siPiAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iIHAtMSBiZy1yZWQtNTAwIHJvdW5kZWQtZnVsbCB0ZXh0LXdoaXRlIHRleHQteHMgZm9udC1ibGFjayI+IHt7IHR1dG9yaWFsLnRtcF9pZHggfX0gPC9zcGFuPiAgCiAgICAgICAgICAgICAgICAgICAgICAsIDx2LWNoaXAgCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0iQ2hrVGltZTJnZXRDb2xvcih0dXRvcmlhbC5sZWZ0X3RpbWUpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXJrIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IHR1dG9yaWFsLmxlZnRfdGltZSB9femboiAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1jaGlwPiAKICAgICAgICAgICAgICAgICAgPC9kaXY+ICAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctYXV0byAgdGV4dC14cyB0ZXh0LWJsdWUtNTAwICI+ICB7eyB0dXRvcmlhbC5wbHlfc3RhdHUgfX0se3sgdHV0b3JpYWwubWVtbyB9fSAgIDwvZGl2PiAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+ICAKCiAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50IAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSIgdGV4dC14cyAgcHktMiBwbC0zIG15LTEgYm9yZGVyLTIgcm91bmRlZC1zbSBiZy1ibHVlLTEwMCBib3JkZXItYmx1ZS0zMDAgIgogICAgICAgICAgICAgICAgICAgIHYtaWY9InR1dG9yaWFsLnNubyA9PSAyMSB8IHR1dG9yaWFsLnNubyA9PSAyMiAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgZmxleCAgdy1mdWxsIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctMS81IHBsLTIiPiB7eyB0dXRvcmlhbC5wb3MgfX1fe3sgdHV0b3JpYWwuc25vX2lkeCB9fSAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiAgdy1hdXRvICAgdGV4dC14cyBmb250LWJsYWNrIj4gCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IiBwLTEgYmctcmVkLTUwMCByb3VuZGVkLWZ1bGwgdGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtYmxhY2siPiB7eyB0dXRvcmlhbC50bXBfaWR4IH19IDwvc3Bhbj4gIAogICAgICAgICAgICAgICAgICAgICAgLCA8di1jaGlwIAogICAgICAgICAgICAgICAgICAgICAgICA6Y29sb3I9IkNoa1RpbWUyZ2V0Q29sb3IodHV0b3JpYWwubGVmdF90aW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGFyayBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyB0dXRvcmlhbC5sZWZ0X3RpbWUgfX3pm6IgCiAgICAgICAgICAgICAgICAgICAgICA8L3YtY2hpcD4gCiAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiB3LWF1dG8gIHRleHQteHMgdGV4dC1ibHVlLTUwMCAiPiAge3sgdHV0b3JpYWwucGx5X3N0YXR1IH19LHt7IHR1dG9yaWFsLm1lbW8gfX0gICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgoKICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQgCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiB0ZXh0LXhzICBweS0yIHBsLTMgbXktMSBib3JkZXItMiByb3VuZGVkLXNtIGJnLWJsdWUtMTAwIGJvcmRlci1ibHVlLTMwMCAiCiAgICAgICAgICAgICAgICAgICAgdi1pZj0idHV0b3JpYWwuc25vID09IDIzIHwgdHV0b3JpYWwuc25vID09IDE0ICIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiBmbGV4ICB3LWZ1bGwiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgdy0xLzUgcGwtMiI+IHt7IHR1dG9yaWFsLnBvcyB9fV97eyB0dXRvcmlhbC5zbm9faWR4IH19ICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iICB3LWF1dG8gICB0ZXh0LXhzIGZvbnQtYmxhY2siPiAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iIHAtMSBiZy1yZWQtNTAwIHJvdW5kZWQtZnVsbCB0ZXh0LXdoaXRlIHRleHQteHMgZm9udC1ibGFjayI+IHt7IHR1dG9yaWFsLnRtcF9pZHggfX0gPC9zcGFuPiAgCiAgICAgICAgICAgICAgICAgICAgICAsIDx2LWNoaXAgCiAgICAgICAgICAgICAgICAgICAgICAgIDpjb2xvcj0iQ2hrVGltZTJnZXRDb2xvcih0dXRvcmlhbC5sZWZ0X3RpbWUpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXJrIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IHR1dG9yaWFsLmxlZnRfdGltZSB9femboiAKICAgICAgICAgICAgICAgICAgICAgIDwvdi1jaGlwPiAKICAgICAgICAgICAgICAgICAgPC9kaXY+ICAKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iIHctYXV0byAgdGV4dC14cyB0ZXh0LWJsdWUtNTAwICI+ICB7eyB0dXRvcmlhbC5wbHlfc3RhdHUgfX0se3sgdHV0b3JpYWwubWVtbyB9fSAgIDwvZGl2PiAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgPC92LWxpc3QtaXRlbS1ncm91cD4KICAgICAgPC92LXRhYi1pdGVtPgoKICAgICAgPHYtdGFiLWl0ZW0ga2V5PSdrMicgdmFsdWU9J2syJyA+IAogICAgICAgICAgICAgICAgCiAgICAgICAgPHYtbGlzdC1pdGVtLWdyb3VwIAogICAgICAgICAgY29sb3I9InByaW1hcnkiIAogICAgICAgICAgPgogICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgIHYtZm9yPSIodHV0b3JpYWwsIGluZGV4KSBpbiB0dXRvcmlhbHMiICAKICAgICAgICAgICAgOmtleT0iaW5kZXgiIAogICAgICAgICAgICB2LWlmPSJ0dXRvcmlhbC5wb3MgPT0nMeaokyciCiAgICAgICAgICA+IAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICA8L3YtbGlzdC1pdGVtLWdyb3VwPgogICAgICA8L3YtdGFiLWl0ZW0+IAoKICAgIDwvdi10YWJzLWl0ZW1zPgogIDwvZGl2PiAKCiAgICAgIDwhLS0gPGRpdiBjbGFzcz0idy0yLzMgbWwtMTAiPgogICAgICAgIDxkaXYgdi1pZj0iY3VycmVudFR1dG9yaWFsIj4KICAgICAgICAgIDx0dXRvcmlhbC1kZXRhaWxzCiAgICAgICAgICAgIDp0dXRvcmlhbD0iY3VycmVudFR1dG9yaWFsIgogICAgICAgICAgICBAcmVmcmVzaExpc3Q9InJlZnJlc2hMaXN0IgogICAgICAgICAgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IHYtZWxzZT4KICAgICAgICAgIDxiciAvPgogICAgICAgICAgPHA+UGxlYXNlIOeiuuiqjSBvbiBhIFR1dG9yaWFsLi4uPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4gLS0+CiAgPGhyPiAKPC9kaXY+Cg=="},null]}